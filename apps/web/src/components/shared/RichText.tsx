import { PortableText } from "@portabletext/react";
import { TypeFromSelection } from "groqd";
import { twMerge } from "tailwind-merge";

import {
  BUTTON_BLOCK_FRAGMENT,
  BUTTON_GROUP_BLOCK_FRAGMENT,
  TESTIMONY_BLOCK_FRAGMENT,
} from "@/sanity/lib/queries/richText";

import { Button } from "../Button";
import { IconDoubleChevron } from "../Icon";
import SanityImage from "./SanityImage";
import ButtonGroup from "./navigation/ButtonGroup";
import SanityLink from "./navigation/SanityLink";

export const RichTextComponents = {
  types: {
    testimonial: ({
      value,
    }: {
      value: TypeFromSelection<typeof TESTIMONY_BLOCK_FRAGMENT>;
    }) => {
      if (!value.testimony) return null;
      return (
        <figure className="not-prose space-y-4 my-16">
          <div className="space-y-4">
            <svg
              className="w-12 h-12 fill-current text-accent"
              viewBox="0 0 56 52"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <g clipPath="url(#clip0_171_1208)">
                <path d="M29.9821 33.8959C29.1761 36.813 29.2312 39.9428 30.439 42.8126C31.5943 45.5591 33.0226 47.6622 35.4304 49.4713C37.3392 50.9049 40.0358 51.6453 42.4041 51.5666C48.4274 51.367 53.4135 45.9109 53.7417 39.9848C53.7706 39.948 53.7968 39.9139 53.8257 39.8771C54.9784 38.3858 55.7293 36.6266 55.9578 34.7624C56.4645 30.6611 52.2004 26.5756 48.8895 24.8794C44.7278 22.7474 39.4082 22.5977 35.5722 25.5437C35.4251 25.6566 35.2833 25.7721 35.1416 25.8876C35.2203 25.2234 35.3096 24.5853 35.412 23.9814C35.5932 22.9075 35.8216 21.8389 36.0737 20.7807C36.1997 20.2504 36.3389 19.7252 36.4833 19.2001C36.6487 18.5936 36.5384 17.9503 36.4229 17.3228C36.885 15.5242 37.628 13.5523 38.7466 12.2159C38.849 12.0924 39.3058 11.7695 38.8779 11.9979C39.3531 11.7432 39.7286 11.3651 40.0174 10.9135C40.301 10.4698 40.5977 10.0339 40.9049 9.60595C40.9311 9.57182 41.0073 9.47204 41.0729 9.3854C41.1753 9.25674 41.2803 9.13071 41.388 9.00468C41.6873 8.65021 42.0076 8.31676 42.3359 7.99118C42.5302 7.80213 42.735 7.62096 42.9424 7.44766C42.8137 7.57107 43.5279 7.04856 43.7143 6.94091C43.8246 6.8779 43.9375 6.82276 44.053 6.76499C44.2368 6.70723 44.6018 6.63634 44.7646 6.59958L44.7698 6.59958C44.8197 6.61796 45.0429 6.65472 45.2582 6.69936C45.4262 6.786 45.8227 6.96979 45.9934 7.07745C46.1772 7.23498 46.3531 7.40565 46.5238 7.57632C49.5091 10.5696 54.2721 5.69635 51.1187 2.98142C48.107 0.387275 44.2001 -0.471318 40.7132 1.8025C39.0748 2.86852 37.8276 4.32839 36.7091 5.91165C36.1997 6.63371 35.756 7.39778 35.3385 8.17497C34.6479 9.46154 35.1731 9.97092 34.5455 11.3415C34.0834 12.3524 33.6633 13.3869 33.2721 14.4267C33.0857 14.9229 32.9124 15.4244 32.7443 15.9259C32.7023 16.0546 32.6472 16.1596 32.6052 16.2331C32.4686 16.3854 32.3321 16.5403 32.2034 16.6978C31.3659 17.7192 31.1584 19.1975 30.867 20.4657C30.6018 21.6105 30.3865 22.7684 30.2053 23.9315C29.8482 26.2264 29.6277 28.4976 29.7458 30.8186C29.7931 31.7691 29.843 32.8351 29.9848 33.8854L29.9821 33.8959Z" />
                <path d="M0.537805 33.3998C-0.268271 36.3169 -0.213136 39.4467 0.994666 42.3165C2.14995 45.063 3.57831 47.1661 5.98604 48.9752C7.89489 50.4088 10.5914 51.1492 12.9572 51.0705C18.983 50.8709 23.9665 45.4148 24.2974 39.4887C24.3262 39.4519 24.3525 39.4178 24.3814 39.3811C25.534 37.8871 26.285 36.1305 26.5134 34.2636C27.0202 30.1624 22.7561 26.0769 19.4452 24.3807C15.2835 22.2486 9.96391 22.099 6.12783 25.045C5.98079 25.1579 5.839 25.2734 5.69722 25.3889C5.77599 24.7246 5.86526 24.0866 5.96766 23.4827C6.14883 22.4088 6.37726 21.3402 6.62933 20.282C6.75536 19.7516 6.89452 19.2265 7.03893 18.7014C7.20434 18.0949 7.09407 17.4516 6.97854 16.824C7.44066 15.0255 8.18371 13.0536 9.30224 11.7171C9.40464 11.5937 9.86151 11.2708 9.43353 11.4992C9.90877 11.2445 10.2842 10.8664 10.5731 10.4148C10.8566 9.97108 11.1533 9.53522 11.4605 9.10723C11.4868 9.0731 11.5629 8.97333 11.6286 8.88668C11.731 8.75802 11.836 8.63199 11.9437 8.50596C12.243 8.1515 12.5607 7.81804 12.8915 7.49246C13.0858 7.30341 13.2906 7.12224 13.498 6.94894C13.3694 7.07235 14.0836 6.54985 14.27 6.44219C14.3803 6.37918 14.4932 6.32404 14.6087 6.26628C14.7925 6.20851 15.1575 6.13762 15.3203 6.10086L15.3255 6.10086C15.3754 6.11924 15.5986 6.156 15.8139 6.20064C15.9819 6.28728 16.3784 6.47108 16.5491 6.57873C16.7329 6.73627 16.9088 6.90694 17.0794 7.07761C20.0648 10.0709 24.8278 5.19764 21.6743 2.4827C18.6627 -0.111443 14.7557 -0.970037 11.2689 1.30378C9.63045 2.3698 8.38327 3.82967 7.26474 5.41294C6.75536 6.13499 6.31162 6.89906 5.89414 7.67625C5.2036 8.96282 5.72873 9.4722 5.10119 10.8428C4.63908 11.8537 4.21898 12.8882 3.82775 13.9279C3.64133 14.4242 3.46804 14.9257 3.29999 15.4272C3.25798 15.5558 3.20284 15.6609 3.16083 15.7344C3.0243 15.8867 2.88777 16.0416 2.75911 16.1991C1.92153 17.2205 1.7141 18.6988 1.42265 19.9669C1.15746 21.1117 0.942155 22.2696 0.760983 23.4328C0.403895 25.7276 0.183338 27.9988 0.301493 30.3199C0.348755 31.2704 0.398643 32.3364 0.54043 33.3867L0.537805 33.3998Z" />
              </g>
            </svg>
            <svg
              className="w-full text-accent"
              viewBox="0 0 1360 10"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M0 9C177.809 9 346.708 3.55907 524.5 3C667.292 2.55099 818.689 5.16866 961.37 3.69136C1046.53 2.80958 1131.28 1.44444 1216.57 1.44444C1264.4 1.44444 1312.17 1 1360 1"
                stroke="currentColor"
                strokeWidth="2"
                vectorEffect="non-scaling-stroke"
              />
            </svg>
          </div>
          <blockquote className="not-prose">
            <p className="not-prose font-heading text-lg font-medium leading-tight text-contrast">
              {value.testimony.quote}
            </p>
          </blockquote>
          <figcaption className="">
            <div className="text-accent text-base font-normal">
              {value.testimony.name}, {value.testimony.company}
            </div>
          </figcaption>
        </figure>
      );
    },
    imageWithAlt: ({ value }: any) => {
      return (
        <>
          {value.link ? (
            <SanityLink link={value.link}>
              <SanityImage
                src={value}
                className="my-4 w-full overflow-hidden"
              />
            </SanityLink>
          ) : (
            <SanityImage src={value} className="my-4 w-full overflow-hidden" />
          )}
        </>
      );
    },
    button: ({
      value,
    }: {
      value: TypeFromSelection<typeof BUTTON_BLOCK_FRAGMENT>;
    }) => {
      const { link, text, variant, width } = value;
      return (
        <SanityLink
          link={link}
          className={twMerge(
            "not-prose mb-5",
            width == "full" ? "block" : "inline-block",
          )}
        >
          <Button as="span" variant={variant} width={width}>
            {text}
          </Button>
        </SanityLink>
      );
    },
    buttonGroup: ({
      value,
    }: {
      value: TypeFromSelection<typeof BUTTON_GROUP_BLOCK_FRAGMENT>;
    }) => {
      return <ButtonGroup buttons={value.buttons} />;
    },
  },
  list: {
    bullet: ({ children }: any) => <ul>{children}</ul>,
    number: ({ children }: any) => <ol>{children}</ol>,
  },
  listItem: {
    // Ex. 2: rendering custom list items
    bullet: ({ children }: any) => <li>{children}</li>,
    number: ({ children }: any) => <li>{children}</li>,
  },

  block: {
    h1: ({ children }: any) => <h1>{children}</h1>,
    h2: ({ children }: any) => <h2>{children}</h2>,
    h3: ({ children }: any) => <h3>{children}</h3>,
    h4: ({ children }: any) => <h4>{children}</h4>,
    h5: ({ children }: any) => <h5>{children}</h5>,
    h6: ({ children }: any) => <h6>{children}</h6>,
    "h2-large": ({ children }: any) => <h2 className="text-4xl">{children}</h2>,
    normal: ({ children }: any) => <p>{children}</p>,
    small: ({ children }: any) => <p className="text-sm">{children}</p>,
    lead: ({ children }: any) => <p className="lead">{children}</p>,
    blockquote: ({ children }: any) => <blockquote>{children}</blockquote>,
  },
  marks: {
    link: ({ children, value }: any) => {
      const link = value;
      return (
        <SanityLink link={link} className="underline">
          {children}
        </SanityLink>
      );
    },
    highlight: ({ children }: any) => (
      <span className="inline-block relative">
        <span className="text-accent absolute inset-0 w-full h-full">
          <svg
            width="105%"
            height="100%"
            viewBox="0 0 161 40"
            fill="none"
            preserveAspectRatio="none"
            className="fill-current text-accent absolute inset-y-0 -inset-x-[2.5%]"
          >
            <path
              d="M160.226 28.9856C160.141 27.5529 159.928 26.5101 159.752 25.3807C159.591 24.3379 159.558 23.2085 159.629 21.6923C159.7 20.1359 158.664 19.2262 157.315 18.8332C156.196 18.5083 154.866 18.663 153.858 18.6506C152.914 18.6413 151.971 18.6908 151.027 18.6785C150.084 18.6661 149.062 18.5578 148.118 18.5454C148.673 17.5986 148.808 16.268 148.649 14.9591C148.5 13.7214 148.244 12.4527 148.208 11.3635C148.163 10.0299 147.943 8.93143 147.822 7.86699C147.691 6.72829 147.542 5.63909 147.523 4.36424C147.499 2.82019 146.461 2.15801 145.154 1.76194C144.052 1.42775 142.784 1.28232 141.766 1.26994C140.83 1.26066 139.893 1.14308 138.954 1.1307C138.016 1.11832 137.081 1.0781 136.143 1.06572C135.204 1.05334 134.27 1.00383 133.331 0.991457C132.394 0.975986 131.455 1.01002 130.519 0.994552C129.582 0.97908 128.646 0.901723 127.707 0.886251C126.77 0.87078 125.831 1.04097 124.893 1.0224C123.956 1.00383 123.017 0.991457 122.081 0.975986C121.144 0.95742 120.208 0.781045 119.271 0.762479C118.335 0.743913 117.396 0.743913 116.459 0.725348C115.523 0.706782 114.586 0.654179 113.647 0.635613C112.711 0.617047 111.772 0.632519 110.835 0.610859C109.899 0.592293 108.958 0.765574 108.021 0.747008C107.085 0.728442 106.146 0.73463 105.209 0.716065C104.273 0.697499 103.334 0.709876 102.397 0.69131C101.461 0.672745 100.524 0.635613 99.5853 0.617047C98.6488 0.598481 97.7122 0.462332 96.7757 0.446861C95.8392 0.431389 94.9003 0.437578 93.9638 0.422106C93.0273 0.406635 92.0884 0.428295 91.1519 0.415918C90.2154 0.403541 89.2789 0.255014 88.3423 0.242637C87.4129 0.23026 86.4812 0.29524 85.5518 0.285957C84.6224 0.27358 83.693 0.236448 82.7636 0.224071C81.8342 0.214788 80.9048 0.0817335 79.9754 0.0724506C79.046 0.0631677 78.1142 0.245731 77.1848 0.236448C76.2554 0.23026 75.326 0.0074703 74.3966 0.0012817C73.4672 -0.0049069 72.5378 0.0136589 71.606 0.0074703C70.6766 0.0012817 69.7448 0.149808 68.8154 0.146714C67.886 0.143619 66.9566 0.245731 66.0248 0.245731C65.0954 0.245731 64.166 0.125054 63.2366 0.121959C62.3072 0.121959 61.3778 0.245731 60.4461 0.245731C59.5167 0.245731 58.5872 0.134337 57.6578 0.134337C56.7284 0.134337 55.799 0.131242 54.8696 0.134337C53.9402 0.137431 53.0108 0.0507905 52.0791 0.0507905C51.1473 0.0507905 50.2203 0.18694 49.2909 0.190034C48.3615 0.190034 47.4321 0.0755449 46.5003 0.0786392C45.5709 0.0817335 44.6415 0.27358 43.7121 0.276674C42.7827 0.279769 41.8533 0.264297 40.9215 0.267391C39.9921 0.270486 39.0603 0.0229418 38.1309 0.0260361C37.2015 0.0322247 36.2721 0.0724506 35.3427 0.0786392C34.3517 0.0848278 33.3606 0.035319 32.3696 0.0415076C31.3785 0.0476962 30.3898 0.289052 29.3988 0.298334C28.4078 0.307617 27.4167 0.128148 26.4257 0.137431C25.4346 0.146714 24.4459 0.326183 23.4549 0.335466C22.4638 0.347843 21.4728 0.347843 20.4818 0.36022C19.5026 0.372598 18.5234 0.258109 17.5442 0.267391C16.565 0.279769 15.5858 0.279769 14.6066 0.29524C13.6274 0.310712 12.6482 0.258109 11.669 0.285957C10.6898 0.310712 9.71538 0.567538 8.73619 0.610859C7.757 0.651084 6.77307 0.502558 5.79388 0.564444C5.10157 0.607764 4.20536 0.654179 3.321 0.635613C2.41531 0.617047 1.52384 0.660367 0.888433 1.06263C0.212719 1.50202 -0.145291 2.30963 0.0538671 3.81346C0.224574 5.10997 0.357345 6.44671 0.392909 7.78963C0.428473 9.12018 0.376313 10.46 0.42136 11.7844C0.468779 13.1582 0.608663 14.5383 0.919255 15.8379C1.23222 17.153 1.65898 18.4185 2.46747 19.384C4.02279 21.2467 3.63396 22.141 5.8081 22.0048C6.78729 21.943 7.76411 21.8037 8.74331 21.7573C9.7225 21.7109 10.7207 21.7913 11.6998 21.7573C11.0739 22.732 11.2351 23.9171 11.4983 25.1827C11.7378 26.3369 11.9678 27.5684 12.0057 28.7071C12.0531 30.0593 12.148 31.7055 12.2546 33.3083C12.3661 34.9761 12.506 36.6378 12.9659 37.8229C13.478 39.1442 14.2865 39.3948 15.1993 39.4629C15.9841 39.5217 16.8945 39.5031 17.8998 39.4381C18.8838 39.3762 19.8677 39.367 20.8516 39.3205C21.8356 39.2741 22.8171 39.1999 23.801 39.1658C24.785 39.1318 25.7665 38.9987 26.7505 38.9771C27.7344 38.9554 28.7183 38.8378 29.7023 38.8224C30.6862 38.81 31.6725 38.9461 32.6564 38.9368C33.6404 38.9307 34.6243 38.8409 35.6082 38.8378C36.5922 38.8347 37.5761 38.8811 38.5624 38.8781C39.5464 38.8781 40.5303 38.9771 41.5142 38.974C42.4982 38.9709 43.4821 38.7852 44.466 38.7759C45.4476 38.7698 46.4291 38.8409 47.4107 38.8378C48.3923 38.8316 49.3738 38.8038 50.3554 38.8007C51.337 38.7976 52.3185 38.8904 53.3001 38.8904C54.2817 38.8904 55.2632 38.6955 56.2424 38.6924C57.224 38.6924 58.2055 38.9585 59.1871 38.9585C60.1687 38.9585 61.1502 38.6738 62.1318 38.6738C63.1133 38.6738 64.0949 38.6738 65.0765 38.6738C66.058 38.6738 67.0396 38.8162 68.0212 38.8162C69.0027 38.8162 69.9843 38.7264 70.9659 38.7264C71.8976 38.7264 72.827 38.7264 73.7588 38.7295C74.6906 38.7295 75.62 38.8533 76.5517 38.8564C77.4835 38.8564 78.4129 38.9802 79.3447 38.9833C80.2765 38.9864 81.2082 38.711 82.1376 38.7172C83.0694 38.7233 83.9988 38.779 84.9306 38.7852C85.8624 38.7914 86.7918 38.9523 87.7235 38.9585C88.6553 38.9678 89.5847 38.8781 90.5165 38.8873C91.4483 38.8966 92.3777 39.0761 93.3071 39.0854C94.2365 39.0947 95.1682 39.1194 96.1 39.1318C97.0318 39.1442 97.9612 39.0916 98.893 39.1039C99.8247 39.1163 100.754 39.1813 101.686 39.1937C102.618 39.2061 103.547 39.1782 104.479 39.1937C105.411 39.2091 106.34 39.271 107.272 39.2834C108.204 39.2989 109.135 39.1287 110.065 39.1442C110.997 39.1596 111.924 39.3608 112.855 39.3762C113.787 39.3917 114.717 39.3917 115.648 39.4072C116.58 39.4226 117.512 39.1658 118.444 39.1844C119.375 39.203 120.305 39.3453 121.234 39.3639C122.164 39.3824 123.095 39.4257 124.027 39.4443C125.023 39.4629 126.016 39.4536 127.012 39.4722C128.008 39.4907 129.001 39.5588 129.995 39.5774C130.991 39.5959 131.984 39.6888 132.977 39.7073C133.973 39.7259 134.967 39.7259 135.962 39.7414C136.958 39.7599 137.954 39.5495 138.95 39.565C139.946 39.5805 140.939 39.6083 141.935 39.6238C142.931 39.6392 143.922 39.8125 144.917 39.828C145.913 39.8435 146.907 39.9951 147.9 40.0075C148.893 40.0198 149.889 39.9425 150.885 39.9549C151.881 39.9672 152.877 39.8342 153.87 39.8435C154.56 39.8528 155.504 39.7847 156.485 39.5588C157.362 39.3608 158.285 39.1565 159.041 38.7264C159.996 38.1818 160.731 37.4021 160.897 36.415C161.134 35.0009 160.945 33.8839 160.767 32.6987C160.601 31.6003 160.326 30.4492 160.238 28.9949L160.226 28.9856Z"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
        </span>
        <span className="relative z-[1] whitespace-nowrap">{children}</span>
      </span>
    ),
    circle: ({ children }: any) => (
      <span className="relative whitespace-nowrap">
        <svg
          width="115%"
          height="120%"
          viewBox="0 0 482 123"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          className="stroke-current absolute -inset-5 top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-complimentary"
        >
          <path
            d="M364.504 23.0109C286.1 8.63476 149.195 9.82054 44.7438 42.9027C-48.656 72.4861 19.7552 120.222 176.725 120.669C374.653 121.231 494.442 86.5922 478.702 47.9306C457.286 -4.68145 205.306 -11.8221 83.2912 23.8108"
            strokeWidth="3"
            strokeMiterlimit="10"
            vectorEffect="non-scaling-stroke"
          />
        </svg>
        <span className="relative z-[1]">{children}</span>
      </span>
    ),
    underline: ({ children }: any) => (
      <span className="relative whitespace-nowrap">
        <span className="relative z-[1]">{children}</span>
        <span className="absolute bottom-2 left-0 text-complimentary w-full">
          <svg
            viewBox="0 0 460 6"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M2 4C31.1327 4 60.08 3.17987 89.0643 2.45901C102.966 2.11328 116.941 2.21686 130.88 2.21686C147.878 2.21686 164.856 2.0335 181.851 2.01873C230.355 1.97658 278.861 2.01873 327.365 2.01873C346.478 2.01873 365.577 1.95138 384.671 2.21686C397.234 2.39153 409.772 2.28667 422.327 2.42599C430.345 2.51496 438.29 3.00937 446.325 3.00937C450.307 3.00937 454.025 3.40562 458 3.40562"
              stroke="currentColor"
              strokeWidth="3"
              strokeLinecap="square"
              vectorEffect="non-scaling-stroke"
            />
          </svg>
        </span>
      </span>
    ),
  },
};

export default function RichText({ value }) {
  return (
    <div className="prose max-w-none">
      <PortableText value={value} components={RichTextComponents} />
    </div>
  );
}
